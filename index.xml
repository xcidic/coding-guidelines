<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcidic Coding Guidelines on Xcidic Coding Guideline</title>
    <link>https://xcidic.github.io/coding-guidelines/</link>
    <description>Recent content in Xcidic Coding Guidelines on Xcidic Coding Guideline</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Apr 2017 18:36:24 +0200</lastBuildDate>
    
	<atom:link href="https://xcidic.github.io/coding-guidelines/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create Bitnami VM</title>
      <link>https://xcidic.github.io/coding-guidelines/gcp/create-bitnami-vm/</link>
      <pubDate>Thu, 13 Jul 2017 14:51:59 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/gcp/create-bitnami-vm/</guid>
      <description> First you already got invitation the Project instance(internal), and then create your GCP project
Create Bitnami VM  Open MEANSTACK Login to ssh in the dashboard  </description>
    </item>
    
    <item>
      <title>NodeJS Style Guide</title>
      <link>https://xcidic.github.io/coding-guidelines/meanjs/nodejs/</link>
      <pubDate>Wed, 12 Jul 2017 14:18:35 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/meanjs/nodejs/</guid>
      <description>Node.JS: Style and structure Additional JavaScript style guides  Felix&amp;rsquo;s Node.js Style Guide Crockford&amp;rsquo;s Code Conventions for the JavaScript Programming Language Or, for something a little more unconventional: NPM&amp;rsquo;s Coding Style Define in this docs  Table of Contents  Avoid this and new More, smaller functions Consistently asynchronous APIs Always check for errors in callbacks Return on callbacks Only throw in synchronous functions Catch errors in sync calls Stick to the callback convention Wrap up  Avoid this and new This may seem like quibbling over coding style, but in Node.</description>
    </item>
    
    <item>
      <title>Basic Rules</title>
      <link>https://xcidic.github.io/coding-guidelines/react/basic-rules/</link>
      <pubDate>Wed, 12 Jul 2017 10:26:12 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/basic-rules/</guid>
      <description> Basic Rules  Only include one React component per file.  However, multiple Stateless, or Pure, Components are allowed per file. eslint: react/no-multi-comp.  Always use JSX syntax. Do not use React.createElement unless you&amp;rsquo;re initializing the app from a file that is not JSX.  </description>
    </item>
    
    <item>
      <title>Single Responsibility</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/single-responsibility/</link>
      <pubDate>Mon, 10 Jul 2017 18:48:19 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/single-responsibility/</guid>
      <description>Single Responsibility Rule of 1 [Style Y001]  Define 1 component per file, recommended to be less than 400 lines of code.  Why?: One component per file promotes easier unit testing and mocking.
Why?: One component per file makes it far easier to read, maintain, and avoid collisions with teams in source control.
Why?: One component per file avoids hidden bugs that often arise when combining components in a file where they may share variables, create unwanted closures, or unwanted coupling with dependencies.</description>
    </item>
    
    <item>
      <title>Configuring Apache</title>
      <link>https://xcidic.github.io/coding-guidelines/gcp/configuring-apache/</link>
      <pubDate>Thu, 13 Jul 2017 14:52:47 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/gcp/configuring-apache/</guid>
      <description>Configuring Apache  Default Installation Directory /opt/bitnami Start the service
sudo /opt/bitnami/ctlscript.sh start
 Create the directories (below this, change YOUR_APP to your app name)
  sudo mkdir /opt/bitnami/YOUR_APP/lithium sudo mkdir /opt/bitnami/apps/YOUR_APP/conf sudo mkdir /opt/bitnami/apps/YOUR_APP/htdocs   Create httpd-prefix.conf config file  sudo touch /opt/bitnami/apps/YOUR_APP/conf/httpd-prefix.conf sudo vim /opt/bitnami/apps/YOUR_APP/conf/httpd-prefix.conf   Insert the following to httpd-prefix.conf then save Include &amp;quot;/opt/bitnami/apps/YOUR_APP/conf/httpd-app.conf
 Create httpd-app.conf config file
  sudo touch /opt/bitnami/apps/YOUR_APP/conf/httpd-app.</description>
    </item>
    
    <item>
      <title>File Organization</title>
      <link>https://xcidic.github.io/coding-guidelines/meanjs/file-organization/</link>
      <pubDate>Wed, 12 Jul 2017 14:45:04 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/meanjs/file-organization/</guid>
      <description>File Organization Please do remember the the project name is using prefix project_. And if the project name is more than one word use _ to separate the name, ex: project_bla_bla, project_abc. Always build a master css file which include styles for every modules. Always build a module-specific css file for styles only used in said module.
 Deliverables  Please remove legacy files, be certain the work is delivered in a clean file system, and in an orderly, logical structure that serves a clear purpose.</description>
    </item>
    
    <item>
      <title>Class Vs React.createClass Vs Stateless</title>
      <link>https://xcidic.github.io/coding-guidelines/react/class-vs-reactcreateclass-vs-stateless/</link>
      <pubDate>Wed, 12 Jul 2017 10:33:05 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/class-vs-reactcreateclass-vs-stateless/</guid>
      <description>Class vs React.createClass vs stateless  If you have internal state and/or refs, prefer class extends React.Component over React.createClass. eslint: react/prefer-es6-class react/prefer-stateless-function
// bad const Listing = React.createClass({ // ... render() { return &amp;lt;div&amp;gt;{this.state.hello}&amp;lt;/div&amp;gt;; } }); // good class Listing extends React.Component { // ... render() { return &amp;lt;div&amp;gt;{this.state.hello}&amp;lt;/div&amp;gt;; } }  And if you don&amp;rsquo;t have state or refs, prefer normal functions (not arrow functions) over classes:
// bad class Listing extends React.</description>
    </item>
    
    <item>
      <title>IIFE</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/iife/</link>
      <pubDate>Mon, 10 Jul 2017 18:45:46 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/iife/</guid>
      <description>IIFE JavaScript Scopes [Style Y010]  Wrap Angular components in an Immediately Invoked Function Expression (IIFE).  Why?: An IIFE removes variables from the global scope. This helps prevent variables and function declarations from living longer than expected in the global scope, which also helps avoid variable collisions.
Why?: When your code is minified and bundled into a single file for deployment to a production server, you could have collisions of variables and many global variables.</description>
    </item>
    
    <item>
      <title>Setting Up Mongodb</title>
      <link>https://xcidic.github.io/coding-guidelines/gcp/setting-up-mongodb/</link>
      <pubDate>Thu, 13 Jul 2017 15:48:25 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/gcp/setting-up-mongodb/</guid>
      <description> Setting Up MongoDB  Login to mongodb, your password is on dashboard  $ mongo admin --username root --password YOUR_DB_PWD
 Create new database name  use YOUR_DB_NAME
 Create new User for that DB  db.createUser( { user: &amp;quot;YOUR_database_user&amp;quot;, pwd: &amp;quot;YOUR_database_password&amp;quot;, roles: [ &amp;quot;readWrite&amp;quot;, &amp;quot;dbAdmin&amp;quot; ]} )  </description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>https://xcidic.github.io/coding-guidelines/meanjs/reference/</link>
      <pubDate>Wed, 12 Jul 2017 15:10:09 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/meanjs/reference/</guid>
      <description>MEAN.JS Documentation Official Documentation</description>
    </item>
    
    <item>
      <title>Mixins</title>
      <link>https://xcidic.github.io/coding-guidelines/react/mixins/</link>
      <pubDate>Wed, 12 Jul 2017 10:35:49 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/mixins/</guid>
      <description> Mixins  Do not use mixins.   Why? Mixins introduce implicit dependencies, cause name clashes, and cause snowballing complexity. Most use cases for mixins can be accomplished in better ways via components, higher-order components, or utility modules.
 </description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/modules/</link>
      <pubDate>Mon, 10 Jul 2017 18:47:01 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/modules/</guid>
      <description>Modules Avoid Naming Collisions [Style Y020]  Use unique naming conventions with separators for sub-modules.  Why?: Unique names help avoid module name collisions. Separators help define modules and their submodule hierarchy. For example app may be your root module while app.dashboard and app.users may be modules that are used as dependencies of app.
Definitions (aka Setters) [Style Y021]  Declare modules without a variable using the setter syntax.  Why?</description>
    </item>
    
    <item>
      <title>Setting Up Meanjs Application</title>
      <link>https://xcidic.github.io/coding-guidelines/gcp/setting-up-meanjs-application/</link>
      <pubDate>Thu, 13 Jul 2017 15:50:10 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/gcp/setting-up-meanjs-application/</guid>
      <description>Setting Up MEANJS Application  navigate to YOUR_APP directory  cd /opt/bitnami/apps/YOUR_APP/
 Get the source  sudo git clone https://YOUR_GIT_URI/GIT_USERNAME/YOUR_PROJECT_REPO.git htdocs
 Navigate to source cd htdocs
 Update and Install dependencies
  sudo apt-get update -q sudo apt-get install -yqq aptitude git traceroute dnsutils tree tcpdump psmisc gcc make build-essential libfreetype6 libfontconfig libkrb5-dev curl sudo apt-get install -y ruby sudo gem install sass sudo npm install --quiet -g grunt-cli gulp bower yo mocha karma-cli pm2 grunt sudo npm install --quiet --production sudo bower install --quiet --allow-root --config.</description>
    </item>
    
    <item>
      <title>MEAN Resources</title>
      <link>https://xcidic.github.io/coding-guidelines/meanjs/mean-resources/</link>
      <pubDate>Wed, 12 Jul 2017 15:18:19 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/meanjs/mean-resources/</guid>
      <description>A Complete Guide to MEAN Stack ❤
Articles  Full-Stack JavaScript With MEAN And Yeoman Build a real-time polls application with Node.js, Express, AngularJS, and MongoDB AngularJS Tutorial: Learn to Build Modern Web Apps Introduction to the MEAN Stack, Part One: Setting Up Your Tools Introduction to the MEAN Stack, Part Two: Building and Testing a To-do List Price Internationalization with the MEAN Stack The MEAN Stack: MongoDB, ExpressJS, AngularJS, and Node.</description>
    </item>
    
    <item>
      <title>Naming</title>
      <link>https://xcidic.github.io/coding-guidelines/react/naming/</link>
      <pubDate>Wed, 12 Jul 2017 10:38:12 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/naming/</guid>
      <description>Naming  Extensions: Use .jsx extension for React components. Filename: Use PascalCase for filenames. E.g., ReservationCard.jsx. Reference Naming: Use PascalCase for React components and camelCase for their instances. eslint: react/jsx-pascal-case
// bad import reservationCard from &#39;./ReservationCard&#39;; // good import ReservationCard from &#39;./ReservationCard&#39;; // bad const ReservationItem = &amp;lt;ReservationCard /&amp;gt;; // good const reservationItem = &amp;lt;ReservationCard /&amp;gt;;  Component Naming: Use the filename as the component name. For example, ReservationCard.jsx should have a reference name of ReservationCard.</description>
    </item>
    
    <item>
      <title>Controllers</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/controllers/</link>
      <pubDate>Mon, 10 Jul 2017 18:43:46 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/controllers/</guid>
      <description>Controllers controllerAs View Syntax [Style Y030]  Use the controllerAs syntax over the classic controller with $scope syntax.  Why?: Controllers are constructed, &amp;ldquo;newed&amp;rdquo; up, and provide a single new instance, and the controllerAs syntax is closer to that of a JavaScript constructor than the classic $scope syntax.
Why?: It promotes the use of binding to a &amp;ldquo;dotted&amp;rdquo; object in the View (e.g. customer.name instead of name), which is more contextual, easier to read, and avoids any reference issues that may occur without &amp;ldquo;dotting&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Setting Up SSL</title>
      <link>https://xcidic.github.io/coding-guidelines/gcp/setting-up-ssl/</link>
      <pubDate>Thu, 13 Jul 2017 15:51:41 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/gcp/setting-up-ssl/</guid>
      <description>Setting Up SSL  Generate the key and csr file using openssl  sudo openssl req -new -nodes -keyout server.key -out server.csr -newkey rsa:2048
Generating a 2048 bit RSA private key...............................................+++..+++ writing new private key to &#39;server.key&#39; ----- You are about to be asked to enter information that will be incorporatedinto your certificate request. What you are about to enter is what is called a Distinguished Name or a DN.</description>
    </item>
    
    <item>
      <title>Declaration</title>
      <link>https://xcidic.github.io/coding-guidelines/react/declaration/</link>
      <pubDate>Wed, 12 Jul 2017 10:54:11 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/declaration/</guid>
      <description> Declaration  Do not use displayName for naming components. Instead, name the component by reference.
// bad export default React.createClass({ displayName: &#39;ReservationCard&#39;, // stuff goes here }); // good export default class ReservationCard extends React.Component { }   </description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/services/</link>
      <pubDate>Mon, 10 Jul 2017 18:47:34 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/services/</guid>
      <description>Services Singletons [Style Y040]  Services are instantiated with the new keyword, use this for public methods and variables. Since these are so similar to factories, use a factory instead for consistency.
Note: All Angular services are singletons. This means that there is only one instance of a given service per injector.
  // service angular .module(&#39;app&#39;) .service(&#39;logger&#39;, logger); function logger() { this.logError = function(msg) { /* */ }; }  // factory angular .</description>
    </item>
    
    <item>
      <title>Alignment</title>
      <link>https://xcidic.github.io/coding-guidelines/react/alignment/</link>
      <pubDate>Wed, 12 Jul 2017 10:59:35 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/alignment/</guid>
      <description> Alignment  Follow these alignment styles for JSX syntax. eslint: react/jsx-closing-bracket-location
// bad &amp;lt;Foo superLongParam=&amp;quot;bar&amp;quot; anotherSuperLongParam=&amp;quot;baz&amp;quot; /&amp;gt; // good &amp;lt;Foo superLongParam=&amp;quot;bar&amp;quot; anotherSuperLongParam=&amp;quot;baz&amp;quot; /&amp;gt; // if props fit in one line then keep it on the same line &amp;lt;Foo bar=&amp;quot;bar&amp;quot; /&amp;gt; // children get indented normally &amp;lt;Foo superLongParam=&amp;quot;bar&amp;quot; anotherSuperLongParam=&amp;quot;baz&amp;quot; &amp;gt; &amp;lt;Quux /&amp;gt; &amp;lt;/Foo&amp;gt;   </description>
    </item>
    
    <item>
      <title>Factories</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/factories/</link>
      <pubDate>Mon, 10 Jul 2017 18:44:58 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/factories/</guid>
      <description>Factories Single Responsibility [Style Y050]  Factories should have a single responsibility, that is encapsulated by its context. Once a factory begins to exceed that singular purpose, a new factory should be created.  Singletons [Style Y051]  Factories are singletons and return an object that contains the members of the service.
Note: All Angular services are singletons.
  Accessible Members Up Top [Style Y052]  Expose the callable members of the service (its interface) at the top, using a technique derived from the Revealing Module Pattern.</description>
    </item>
    
    <item>
      <title>Quotes</title>
      <link>https://xcidic.github.io/coding-guidelines/react/quotes/</link>
      <pubDate>Wed, 12 Jul 2017 11:01:39 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/quotes/</guid>
      <description> Quotes  Always use double quotes (&amp;quot;) for JSX attributes, but single quotes (&#39;) for all other JS. eslint: jsx-quotes
 Why? Regular HTML attributes also typically use double quotes instead of single, so JSX attributes mirror this convention.
 // bad &amp;lt;Foo bar=&#39;bar&#39; /&amp;gt; // good &amp;lt;Foo bar=&amp;quot;bar&amp;quot; /&amp;gt; // bad &amp;lt;Foo style={{ left: &amp;quot;20px&amp;quot; }} /&amp;gt; // good &amp;lt;Foo style={{ left: &#39;20px&#39; }} /&amp;gt;   </description>
    </item>
    
    <item>
      <title>Data Services</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/data-services/</link>
      <pubDate>Mon, 10 Jul 2017 18:44:00 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/data-services/</guid>
      <description>Data Services Separate Data Calls [Style Y060]  Refactor logic for making data operations and interacting with data to a factory. Make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations.
Why?: The controller&amp;rsquo;s responsibility is for the presentation and gathering of information for the view. It should not care how it gets the data, just that it knows who to ask for it.</description>
    </item>
    
    <item>
      <title>Spacing</title>
      <link>https://xcidic.github.io/coding-guidelines/react/spacing/</link>
      <pubDate>Wed, 12 Jul 2017 11:03:32 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/spacing/</guid>
      <description> Spacing  Always include a single space in your self-closing tag. eslint: no-multi-spaces, react/jsx-tag-spacing
// bad &amp;lt;Foo/&amp;gt; // very bad &amp;lt;Foo /&amp;gt; // bad &amp;lt;Foo /&amp;gt; // good &amp;lt;Foo /&amp;gt;  Do not pad JSX curly braces with spaces. eslint: react/jsx-curly-spacing
// bad &amp;lt;Foo bar={ baz } /&amp;gt; // good &amp;lt;Foo bar={baz} /&amp;gt;   </description>
    </item>
    
    <item>
      <title>Directives</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/directives/</link>
      <pubDate>Mon, 10 Jul 2017 18:44:12 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/directives/</guid>
      <description>Directives Limit 1 Per File [Style Y070]  Create one directive per file. Name the file for the directive.
Why?: It is easy to mash all the directives in one file, but difficult to then break those out so some are shared across apps, some across modules, some just for one module.
Why?: One directive per file is easy to maintain.
 Note: &amp;ldquo;Best Practice: Directives should clean up after themselves.</description>
    </item>
    
    <item>
      <title>Props</title>
      <link>https://xcidic.github.io/coding-guidelines/react/props/</link>
      <pubDate>Wed, 12 Jul 2017 11:09:56 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/props/</guid>
      <description>Props  Always use camelCase for prop names.
// bad &amp;lt;Foo UserName=&amp;quot;hello&amp;quot; phone_number={12345678} /&amp;gt; // good &amp;lt;Foo userName=&amp;quot;hello&amp;quot; phoneNumber={12345678} /&amp;gt;  Omit the value of the prop when it is explicitly true. eslint: react/jsx-boolean-value
// bad &amp;lt;Foo hidden={true} /&amp;gt; // good &amp;lt;Foo hidden /&amp;gt;  Always include an alt prop on &amp;lt;img&amp;gt; tags. If the image is presentational, alt can be an empty string or the &amp;lt;img&amp;gt; must have role=&amp;quot;presentation&amp;quot;.</description>
    </item>
    
    <item>
      <title>Resolving Promises</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/resolving-promises/</link>
      <pubDate>Mon, 10 Jul 2017 18:47:19 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/resolving-promises/</guid>
      <description>Resolving Promises Controller Activation Promises [Style Y080]  Resolve start-up logic for a controller in an activate function.
Why?: Placing start-up logic in a consistent place in the controller makes it easier to locate, more consistent to test, and helps avoid spreading out the activation logic across the controller.
Why?: The controller activate makes it convenient to re-use the logic for a refresh for the controller/View, keeps the logic together, gets the user to the View faster, makes animations easy on the ng-view or ui-view, and feels snappier to the user.</description>
    </item>
    
    <item>
      <title>Refs</title>
      <link>https://xcidic.github.io/coding-guidelines/react/refs/</link>
      <pubDate>Wed, 12 Jul 2017 11:14:47 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/refs/</guid>
      <description> Refs  Always use ref callbacks. eslint: react/no-string-refs
// bad &amp;lt;Foo ref=&amp;quot;myRef&amp;quot; /&amp;gt; // good &amp;lt;Foo ref={(ref) =&amp;gt; { this.myRef = ref; }} /&amp;gt;   </description>
    </item>
    
    <item>
      <title>Manual Annotating for Dependencies Injection</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/manual-annotating-for-dependency-injection/</link>
      <pubDate>Mon, 10 Jul 2017 18:46:24 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/manual-annotating-for-dependency-injection/</guid>
      <description>Manual Annotating for Dependency Injection UnSafe from Minification [Style Y090]  Avoid using the shortcut syntax of declaring dependencies without using a minification-safe approach.
Why?: The parameters to the component (e.g. controller, factory, etc) will be converted to mangled variables. For example, common and dataservice may become a or b and not be found by Angular.
/* avoid - not minification-safe*/ angular .module(&#39;app&#39;) .controller(&#39;DashboardController&#39;, DashboardController); function DashboardController(common, dataservice) { }  This code may produce mangled variables when minified and thus cause runtime errors.</description>
    </item>
    
    <item>
      <title>Parentheses</title>
      <link>https://xcidic.github.io/coding-guidelines/react/parentheses/</link>
      <pubDate>Wed, 12 Jul 2017 11:22:31 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/parentheses/</guid>
      <description> Parentheses  Wrap JSX tags in parentheses when they span more than one line. eslint: react/jsx-wrap-multilines
// bad render() { return &amp;lt;MyComponent className=&amp;quot;long body&amp;quot; foo=&amp;quot;bar&amp;quot;&amp;gt; &amp;lt;MyChild /&amp;gt; &amp;lt;/MyComponent&amp;gt;; } // good render() { return ( &amp;lt;MyComponent className=&amp;quot;long body&amp;quot; foo=&amp;quot;bar&amp;quot;&amp;gt; &amp;lt;MyChild /&amp;gt; &amp;lt;/MyComponent&amp;gt; ); } // good, when single line render() { const body = &amp;lt;div&amp;gt;hello&amp;lt;/div&amp;gt;; return &amp;lt;MyComponent&amp;gt;{body}&amp;lt;/MyComponent&amp;gt;; }   </description>
    </item>
    
    <item>
      <title>Minification and Annotation</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/minification-and-annotation/</link>
      <pubDate>Mon, 10 Jul 2017 18:46:45 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/minification-and-annotation/</guid>
      <description>Minification and Annotation ng-annotate [Style Y100]  Use ng-annotate for Gulp or Grunt and comment functions that need automated dependency injection using /* @ngInject */
Why?: This safeguards your code from any dependencies that may not be using minification-safe practices.
Why?: ng-min is deprecated
 I prefer Gulp as I feel it is easier to write, to read, and to debug.
 The following code is not using minification safe dependencies.</description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>https://xcidic.github.io/coding-guidelines/react/tags/</link>
      <pubDate>Wed, 12 Jul 2017 11:24:02 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/tags/</guid>
      <description> Tags  Always self-close tags that have no children. eslint: react/self-closing-comp
// bad &amp;lt;Foo className=&amp;quot;stuff&amp;quot;&amp;gt;&amp;lt;/Foo&amp;gt; // good &amp;lt;Foo className=&amp;quot;stuff&amp;quot; /&amp;gt;  If your component has multi-line properties, close its tag on a new line. eslint: react/jsx-closing-bracket-location
// bad &amp;lt;Foo bar=&amp;quot;bar&amp;quot; baz=&amp;quot;baz&amp;quot; /&amp;gt; // good &amp;lt;Foo bar=&amp;quot;bar&amp;quot; baz=&amp;quot;baz&amp;quot; /&amp;gt;   </description>
    </item>
    
    <item>
      <title>Exception Handling</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/exception-handling/</link>
      <pubDate>Mon, 10 Jul 2017 18:44:45 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/exception-handling/</guid>
      <description>Exception Handling decorators [Style Y110]  Use a decorator, at config time using the $provide service, on the $exceptionHandler service to perform custom actions when exceptions occur.
Why?: Provides a consistent way to handle uncaught Angular exceptions for development-time or run-time.
Note: Another option is to override the service instead of using a decorator. This is a fine option, but if you want to keep the default behavior and extend it a decorator is recommended.</description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>https://xcidic.github.io/coding-guidelines/react/methods/</link>
      <pubDate>Wed, 12 Jul 2017 11:27:22 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/methods/</guid>
      <description>Methods  Use arrow functions to close over local variables.
function ItemList(props) { return ( &amp;lt;ul&amp;gt; {props.items.map((item, index) =&amp;gt; ( &amp;lt;Item key={item.key} onClick={() =&amp;gt; doSomethingWith(item.name, index)} /&amp;gt; ))} &amp;lt;/ul&amp;gt; ); }  Bind event handlers for the render method in the constructor. eslint: react/jsx-no-bind
 Why? A bind call in the render path creates a brand new function on every single render.
 // bad class extends React.Component { onClickDiv() { // do stuff } render() { return &amp;lt;div onClick={this.</description>
    </item>
    
    <item>
      <title>Naming</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/naming/</link>
      <pubDate>Mon, 10 Jul 2017 18:47:09 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/naming/</guid>
      <description>Naming Naming Guidelines [Style Y120]  Use consistent names for all components following a pattern that describes the component&amp;rsquo;s feature then (optionally) its type. My recommended pattern is feature.type.js. There are 2 names for most assets:
 the file name (avengers.controller.js) the registered component name with Angular (AvengersController)  Why?: Naming conventions help provide a consistent way to find content at a glance. Consistency within the project is vital. Consistency with a team is important.</description>
    </item>
    
    <item>
      <title>Ordering</title>
      <link>https://xcidic.github.io/coding-guidelines/react/ordering/</link>
      <pubDate>Wed, 12 Jul 2017 11:36:50 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/ordering/</guid>
      <description>Ordering  Ordering for class extends React.Component:   optional static methods constructor getChildContext componentWillMount componentDidMount componentWillReceiveProps shouldComponentUpdate componentWillUpdate componentDidUpdate componentWillUnmount clickHandlers or eventHandlers like onClickSubmit() or onChangeDescription() getter methods for render like getSelectReason() or getFooterContent() optional render methods like renderNavigation() or renderProfilePicture() render   How to define propTypes, defaultProps, contextTypes, etc&amp;hellip;
import React from &#39;react&#39;; import PropTypes from &#39;prop-types&#39;; const propTypes = { id: PropTypes.number.isRequired, url: PropTypes.string.isRequired, text: PropTypes.</description>
    </item>
    
    <item>
      <title>Application Structure Lift Principle</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/application-structure-lift-principle/</link>
      <pubDate>Mon, 10 Jul 2017 18:42:53 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/application-structure-lift-principle/</guid>
      <description>Application Structure LIFT Principle LIFT [Style Y140]  Structure your app such that you can Locate your code quickly, Identify the code at a glance, keep the Flattest structure you can, and Try to stay DRY. The structure should follow these 4 basic guidelines.
Why LIFT?: Provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. Another way to check your app structure is to ask yourself: How quickly can you open and work in all of the related files for a feature?</description>
    </item>
    
    <item>
      <title>Ismounted</title>
      <link>https://xcidic.github.io/coding-guidelines/react/ismounted/</link>
      <pubDate>Wed, 12 Jul 2017 11:40:11 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/react/ismounted/</guid>
      <description> isMounted  Do not use isMounted. eslint: react/no-is-mounted   Why? isMounted is an anti-pattern, is not available when using ES6 classes, and is on its way to being officially deprecated.
 </description>
    </item>
    
    <item>
      <title>Application Structure</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/application-structure/</link>
      <pubDate>Mon, 10 Jul 2017 18:43:01 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/application-structure/</guid>
      <description>Application Structure Overall Guidelines [Style Y150]  Have a near term view of implementation and a long term vision. In other words, start small but keep in mind on where the app is heading down the road. All of the app&amp;rsquo;s code goes in a root folder named app. All content is 1 feature per file. Each controller, service, module, view is in its own file. All 3rd party vendor scripts are stored in another root folder and not in the app folder.</description>
    </item>
    
    <item>
      <title>Modularity</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/modularity/</link>
      <pubDate>Mon, 10 Jul 2017 18:46:55 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/modularity/</guid>
      <description>Modularity Many Small, Self Contained Modules [Style Y160]  Create small modules that encapsulate one responsibility.
Why?: Modular applications make it easy to plug and go as they allow the development teams to build vertical slices of the applications and roll out incrementally. This means we can plug in new features as we develop them.
  Create an App Module [Style Y161]  Create an application root module whose role is to pull together all of the modules and features of your application.</description>
    </item>
    
    <item>
      <title>Startuplogic</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/startup-logic/</link>
      <pubDate>Mon, 10 Jul 2017 18:48:31 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/startup-logic/</guid>
      <description>Startup Logic Configuration [Style Y170]  Inject code into module configuration that must be configured before running the angular app. Ideal candidates include providers and constants.
Why?: This makes it easier to have less places for configuration.
  angular .module(&#39;app&#39;) .config(configure); configure.$inject = [&#39;routerHelperProvider&#39;, &#39;exceptionHandlerProvider&#39;, &#39;toastr&#39;]; function configure (routerHelperProvider, exceptionHandlerProvider, toastr) { exceptionHandlerProvider.configure(config.appErrorPrefix); configureStateHelper(); toastr.options.timeOut = 4000; toastr.options.positionClass = &#39;toast-bottom-right&#39;; //////////////// function configureStateHelper() { routerHelperProvider.configure({ docTitle: &#39;NG-Modular: &#39; }); } }  Run Blocks [Style Y171]  Any code that needs to run when an application starts should be declared in a factory, exposed via a function, and injected into the run block.</description>
    </item>
    
    <item>
      <title>Angular $ Wrapper Services</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/angular-wrapper-services/</link>
      <pubDate>Mon, 10 Jul 2017 18:42:17 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/angular-wrapper-services/</guid>
      <description>Angular $ Wrapper Services $document and $window [Style Y180]  Use $document and $window instead of document and window.
Why?: These services are wrapped by Angular and more easily testable than using document and window in tests. This helps you avoid having to mock document and window yourself.
  $timeout and $interval [Style Y181]  Use $timeout and $interval instead of setTimeout and setInterval .
Why?: These services are wrapped by Angular and more easily testable and handle Angular&amp;rsquo;s digest cycle thus keeping data binding in sync.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/testing/</link>
      <pubDate>Mon, 10 Jul 2017 18:49:01 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/testing/</guid>
      <description>Testing Unit testing helps maintain clean code, as such I included some of my recommendations for unit testing foundations with links for more information.
Write Tests with Stories [Style Y190]  Write a set of tests for every story. Start with an empty test and fill them in as you write the code for the story.
Why?: Writing the test descriptions helps clearly define what your story will do, will not do, and how you can measure success.</description>
    </item>
    
    <item>
      <title>Animations</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/animations/</link>
      <pubDate>Mon, 10 Jul 2017 18:42:32 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/animations/</guid>
      <description>Animations Usage [Style Y210]  Use subtle animations with Angular to transition between states for views and primary visual elements. Include the ngAnimate module. The 3 keys are subtle, smooth, seamless.
Why?: Subtle animations can improve User Experience when used appropriately.
Why?: Subtle animations can improve perceived performance as views transition.
  Sub Second [Style Y211]  Use short durations for animations. I generally start with 300ms and adjust until appropriate.</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/comments/</link>
      <pubDate>Mon, 10 Jul 2017 18:43:13 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/comments/</guid>
      <description>Comments jsDoc [Style Y220]  If planning to produce documentation, use jsDoc syntax to document function names, description, params and returns. Use @namespace and @memberOf to match your app structure.
Why?: You can generate (and regenerate) documentation from your code, instead of writing it from scratch.
Why?: Provides consistency using a common industry tool.
  /** * Logger Factory * @namespace Factories */ (function() { angular .module(&#39;app&#39;) .factory(&#39;logger&#39;, logger); /** * @namespace Logger * @desc Application wide logger * @memberOf Factories */ function logger($log) { var service = { logError: logError }; return service; //////////// s /** * @name logError * @desc Logs errors * @param {String} msg Message to log * @returns {String} * @memberOf Factories.</description>
    </item>
    
    <item>
      <title>JShint</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/jshint/</link>
      <pubDate>Mon, 10 Jul 2017 18:45:57 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/jshint/</guid>
      <description>JS Hint Use an Options File [Style Y230]  Use JS Hint for linting your JavaScript and be sure to customize the JS Hint options file and include in source control. See the JS Hint docs for details on the options.
Why?: Provides a first alert prior to committing any code to source control.
Why?: Provides consistency across your team.
{ &amp;quot;bitwise&amp;quot;: true, &amp;quot;camelcase&amp;quot;: true, &amp;quot;curly&amp;quot;: true, &amp;quot;eqeqeq&amp;quot;: true, &amp;quot;esversion&amp;quot;: 6, &amp;quot;forin&amp;quot;: true, &amp;quot;freeze&amp;quot;: true, &amp;quot;immed&amp;quot;: true, &amp;quot;indent&amp;quot;: 4, &amp;quot;latedef&amp;quot;: &amp;quot;nofunc&amp;quot;, &amp;quot;newcap&amp;quot;: true, &amp;quot;noarg&amp;quot;: true, &amp;quot;noempty&amp;quot;: true, &amp;quot;nonbsp&amp;quot;: true, &amp;quot;nonew&amp;quot;: true, &amp;quot;plusplus&amp;quot;: false, &amp;quot;quotmark&amp;quot;: &amp;quot;single&amp;quot;, &amp;quot;undef&amp;quot;: true, &amp;quot;unused&amp;quot;: false, &amp;quot;strict&amp;quot;: false, &amp;quot;maxparams&amp;quot;: 10, &amp;quot;maxdepth&amp;quot;: 5, &amp;quot;maxstatements&amp;quot;: 40, &amp;quot;maxcomplexity&amp;quot;: 8, &amp;quot;maxlen&amp;quot;: 120, &amp;quot;asi&amp;quot;: false, &amp;quot;boss&amp;quot;: false, &amp;quot;debug&amp;quot;: false, &amp;quot;eqnull&amp;quot;: true, &amp;quot;esnext&amp;quot;: false, &amp;quot;evil&amp;quot;: false, &amp;quot;expr&amp;quot;: false, &amp;quot;funcscope&amp;quot;: false, &amp;quot;globalstrict&amp;quot;: false, &amp;quot;iterator&amp;quot;: false, &amp;quot;lastsemic&amp;quot;: false, &amp;quot;laxbreak&amp;quot;: false, &amp;quot;laxcomma&amp;quot;: false, &amp;quot;loopfunc&amp;quot;: true, &amp;quot;maxerr&amp;quot;: 50, &amp;quot;moz&amp;quot;: false, &amp;quot;multistr&amp;quot;: false, &amp;quot;notypeof&amp;quot;: false, &amp;quot;proto&amp;quot;: false, &amp;quot;scripturl&amp;quot;: false, &amp;quot;shadow&amp;quot;: false, &amp;quot;sub&amp;quot;: true, &amp;quot;supernew&amp;quot;: false, &amp;quot;validthis&amp;quot;: false, &amp;quot;noyield&amp;quot;: false, &amp;quot;browser&amp;quot;: true, &amp;quot;node&amp;quot;: true, &amp;quot;globals&amp;quot;: { &amp;quot;angular&amp;quot;: false, &amp;quot;$&amp;quot;: false } }   Back to Table of Contents</description>
    </item>
    
    <item>
      <title>JSCS</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/jscs/</link>
      <pubDate>Mon, 10 Jul 2017 18:45:51 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/jscs/</guid>
      <description>JSCS Use an Options File [Style Y235]  Use JSCS for checking your coding styles your JavaScript and be sure to customize the JSCS options file and include in source control. See the JSCS docs for details on the options.
Why?: Provides a first alert prior to committing any code to source control.
Why?: Provides consistency across your team.
{ &amp;quot;excludeFiles&amp;quot;: [&amp;quot;node_modules/**&amp;quot;, &amp;quot;bower_components/**&amp;quot;], &amp;quot;requireCurlyBraces&amp;quot;: [ &amp;quot;if&amp;quot;, &amp;quot;else&amp;quot;, &amp;quot;for&amp;quot;, &amp;quot;while&amp;quot;, &amp;quot;do&amp;quot;, &amp;quot;try&amp;quot;, &amp;quot;catch&amp;quot; ], &amp;quot;requireOperatorBeforeLineBreak&amp;quot;: true, &amp;quot;requireCamelCaseOrUpperCaseIdentifiers&amp;quot;: true, &amp;quot;maximumLineLength&amp;quot;: { &amp;quot;value&amp;quot;: 100, &amp;quot;allowComments&amp;quot;: true, &amp;quot;allowRegex&amp;quot;: true }, &amp;quot;validateIndentation&amp;quot;: 4, &amp;quot;validateQuoteMarks&amp;quot;: &amp;quot;&#39;&amp;quot;, &amp;quot;disallowMultipleLineStrings&amp;quot;: true, &amp;quot;disallowMixedSpacesAndTabs&amp;quot;: true, &amp;quot;disallowTrailingWhitespace&amp;quot;: true, &amp;quot;disallowSpaceAfterPrefixUnaryOperators&amp;quot;: true, &amp;quot;disallowMultipleVarDecl&amp;quot;: null, &amp;quot;requireSpaceAfterKeywords&amp;quot;: [ &amp;quot;if&amp;quot;, &amp;quot;else&amp;quot;, &amp;quot;for&amp;quot;, &amp;quot;while&amp;quot;, &amp;quot;do&amp;quot;, &amp;quot;switch&amp;quot;, &amp;quot;return&amp;quot;, &amp;quot;try&amp;quot;, &amp;quot;catch&amp;quot; ], &amp;quot;requireSpaceBeforeBinaryOperators&amp;quot;: [ &amp;quot;=&amp;quot;, &amp;quot;+=&amp;quot;, &amp;quot;-=&amp;quot;, &amp;quot;*=&amp;quot;, &amp;quot;/=&amp;quot;, &amp;quot;%=&amp;quot;, &amp;quot;&amp;lt;&amp;lt;=&amp;quot;, &amp;quot;&amp;gt;&amp;gt;=&amp;quot;, &amp;quot;&amp;gt;&amp;gt;&amp;gt;=&amp;quot;, &amp;quot;&amp;amp;=&amp;quot;, &amp;quot;|=&amp;quot;, &amp;quot;^=&amp;quot;, &amp;quot;+=&amp;quot;, &amp;quot;+&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;*&amp;quot;, &amp;quot;/&amp;quot;, &amp;quot;%&amp;quot;, &amp;quot;&amp;lt;&amp;lt;&amp;quot;, &amp;quot;&amp;gt;&amp;gt;&amp;quot;, &amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;quot;, &amp;quot;&amp;amp;&amp;quot;, &amp;quot;|&amp;quot;, &amp;quot;^&amp;quot;, &amp;quot;&amp;amp;&amp;amp;&amp;quot;, &amp;quot;||&amp;quot;, &amp;quot;===&amp;quot;, &amp;quot;==&amp;quot;, &amp;quot;&amp;gt;=&amp;quot;, &amp;quot;&amp;lt;=&amp;quot;, &amp;quot;&amp;lt;&amp;quot;, &amp;quot;&amp;gt;&amp;quot;, &amp;quot;!</description>
    </item>
    
    <item>
      <title>Constants</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/constants/</link>
      <pubDate>Mon, 10 Jul 2017 18:43:30 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/constants/</guid>
      <description>Constants Vendor Globals [Style Y240]  Create an Angular Constant for vendor libraries&amp;rsquo; global variables.
Why?: Provides a way to inject vendor libraries that otherwise are globals. This improves code testability by allowing you to more easily know what the dependencies of your components are (avoids leaky abstractions). It also allows you to mock these dependencies, where it makes sense.
// constants.js /* global toastr:false, moment:false */ (function() { &#39;use strict&#39;; angular .</description>
    </item>
    
    <item>
      <title>File Templates And Snippets</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/file-templates-and-snippets/</link>
      <pubDate>Mon, 10 Jul 2017 18:45:30 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/file-templates-and-snippets/</guid>
      <description>File Templates and Snippets Use file templates or snippets to help follow consistent styles and patterns. Here are templates and/or snippets for some of the web development editors and IDEs.
Sublime Text [Style Y250]  Angular snippets that follow these styles and guidelines.
 Download the Sublime Angular snippets Place it in your Packages folder Restart Sublime In a JavaScript file type these commands followed by a TAB  ngcontroller // creates an Angular controller ngdirective // creates an Angular directive ngfactory // creates an Angular factory ngmodule // creates an Angular module ngservice // creates an Angular service ngfilter // creates an Angular filter   Visual Studio [Style Y251]  Angular file templates that follow these styles and guidelines can be found at SideWaffle</description>
    </item>
    
    <item>
      <title>Yeoman Generator</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/yeoman-generator/</link>
      <pubDate>Mon, 10 Jul 2017 18:49:13 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/yeoman-generator/</guid>
      <description>Yeoman Generator [Style Y260] You can use the HotTowel yeoman generator to create an app that serves as a starting point for Angular that follows this style guide.
 Install generator-hottowel   npm install -g generator-hottowel   Create a new folder and change directory to it   mkdir myapp cd myapp   Run the generator   yo hottowel helloWorld  Back to Table of Contents</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/routing/</link>
      <pubDate>Mon, 10 Jul 2017 18:47:27 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/routing/</guid>
      <description>Routing Client-side routing is important for creating a navigation flow between views and composing views that are made of many smaller templates and directives.
[Style Y270]  Use the AngularUI Router for client-side routing.
Why?: UI Router offers all the features of the Angular router plus a few additional ones including nested routes and states.
Why?: The syntax is quite similar to the Angular router and is easy to migrate to UI Router.</description>
    </item>
    
    <item>
      <title>Task Automation</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/task-automation/</link>
      <pubDate>Mon, 10 Jul 2017 18:48:49 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/task-automation/</guid>
      <description>Task Automation Use Gulp or Grunt for creating automated tasks. Gulp leans to code over configuration while Grunt leans to configuration over code. I personally prefer Gulp as I feel it is easier to read and write, but both are excellent.
 Learn more about gulp and patterns for task automation in my Gulp Pluralsight course
 [Style Y400]  Use task automation to list module definition files *.module.js before all other application JavaScript files.</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/filters/</link>
      <pubDate>Mon, 10 Jul 2017 18:45:41 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/filters/</guid>
      <description>Filters [Style Y420]  Avoid using filters for scanning all properties of a complex object graph. Use filters for select properties.
Why?: Filters can easily be abused and negatively affect performance if not used wisely, for example when a filter hits a large and deep object graph.
  Back to Table of Contents</description>
    </item>
    
    <item>
      <title>Angular Docs</title>
      <link>https://xcidic.github.io/coding-guidelines/angular1/angular-docs/</link>
      <pubDate>Mon, 10 Jul 2017 18:42:05 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/angular1/angular-docs/</guid>
      <description>Angular docs For anything else, API reference, check the Angular documentation.
Back to Table of Contents</description>
    </item>
    
    <item>
      <title>Types</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/types/</link>
      <pubDate>Tue, 11 Jul 2017 11:10:34 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/types/</guid>
      <description>Types  Primitives: When you access a primitive type you work directly on its value.
 string number boolean null undefined  var foo = 1; var bar = foo; bar = 9; console.log(foo, bar); // =&amp;gt; 1, 9  Complex: When you access a complex type you work on a reference to its value.
 object array function  var foo = [1, 2]; var bar = foo; bar[0] = 9; console.</description>
    </item>
    
    <item>
      <title>Objects</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/objects/</link>
      <pubDate>Tue, 11 Jul 2017 11:14:02 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/objects/</guid>
      <description>Objects  Use the literal syntax for object creation.
// bad var item = new Object(); // good var item = {};  Don&amp;rsquo;t use reserved words as keys. It won&amp;rsquo;t work in IE8. More info.
// bad var superman = { default: { clark: &#39;kent&#39; }, private: true }; // good var superman = { defaults: { clark: &#39;kent&#39; }, hidden: true };  Use readable synonyms in place of reserved words.</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/arrays/</link>
      <pubDate>Tue, 11 Jul 2017 11:18:30 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/arrays/</guid>
      <description>Arrays  Use the literal syntax for array creation.
// bad var items = new Array(); // good var items = [];  Use Array#push instead of direct assignment to add items to an array.
var someStack = []; // bad someStack[someStack.length] = &#39;abracadabra&#39;; // good someStack.push(&#39;abracadabra&#39;);  When you need to copy an array use Array#slice. jsPerf
var len = items.length; var itemsCopy = []; var i; // bad for (i = 0; i &amp;lt; len; i++) { itemsCopy[i] = items[i]; } // good itemsCopy = items.</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/strings/</link>
      <pubDate>Tue, 11 Jul 2017 11:20:52 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/strings/</guid>
      <description>Strings  Use single quotes &#39;&#39; for strings.
// bad var name = &amp;quot;Bob Parr&amp;quot;; // good var name = &#39;Bob Parr&#39;; // bad var fullName = &amp;quot;Bob &amp;quot; + this.lastName; // good var fullName = &#39;Bob &#39; + this.lastName;  Strings longer than 100 characters should be written across multiple lines using string concatenation.
 Note: If overused, long strings with concatenation could impact performance. jsPerf &amp;amp; Discussion.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/functions/</link>
      <pubDate>Tue, 11 Jul 2017 11:23:51 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/functions/</guid>
      <description>Functions  Function expressions:
// anonymous function expression var anonymous = function () { return true; }; // named function expression var named = function named() { return true; }; // immediately-invoked function expression (IIFE) (function () { console.log(&#39;Welcome to the Internet. Please follow me.&#39;); }());  Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears.</description>
    </item>
    
    <item>
      <title>Properties</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/properties/</link>
      <pubDate>Tue, 11 Jul 2017 11:26:38 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/properties/</guid>
      <description>Properties  Use dot notation when accessing properties.
var luke = { jedi: true, age: 28 }; // bad var isJedi = luke[&#39;jedi&#39;]; // good var isJedi = luke.jedi;  Use subscript notation [] when accessing properties with a variable.
var luke = { jedi: true, age: 28 }; function getProp(prop) { return luke[prop]; } var isJedi = getProp(&#39;jedi&#39;);   ⬆ Back to Table of Contents</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/variables/</link>
      <pubDate>Tue, 11 Jul 2017 11:28:52 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/variables/</guid>
      <description>Variables  Always use var to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that.
// bad superPower = new SuperPower(); // good var superPower = new SuperPower();  Use one var declaration per variable. It&amp;rsquo;s easier to add new variable declarations this way, and you never have to worry about swapping out a ; for a , or introducing punctuation-only diffs.</description>
    </item>
    
    <item>
      <title>Hoisting</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/hoisting/</link>
      <pubDate>Tue, 11 Jul 2017 11:32:17 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/hoisting/</guid>
      <description>Hoisting  Variable declarations get hoisted to the top of their scope, but their assignment does not.
// we know this wouldn&#39;t work (assuming there // is no notDefined global variable) function example() { console.log(notDefined); // =&amp;gt; throws a ReferenceError } // creating a variable declaration after you // reference the variable will work due to // variable hoisting. Note: the assignment // value of `true` is not hoisted. function example() { console.</description>
    </item>
    
    <item>
      <title>Comparison Operators &amp; Equality</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/comparison-operators--equality/</link>
      <pubDate>Tue, 11 Jul 2017 11:34:25 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/comparison-operators--equality/</guid>
      <description>Comparison Operators &amp;amp; Equality  Use === and !== over == and !=. Conditional statements such as the if statement evaluate their expression using coercion with the ToBoolean abstract method and always follow these simple rules:
 Objects evaluate to true Undefined evaluates to false Null evaluates to false Booleans evaluate to the value of the boolean Numbers evaluate to false if +0, -0, or NaN, otherwise true Strings evaluate to false if an empty string &#39;&#39;, otherwise true  if ([0]) { // true // An array is an object, objects evaluate to true }  Use shortcuts.</description>
    </item>
    
    <item>
      <title>Blocks</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/blocks/</link>
      <pubDate>Tue, 11 Jul 2017 11:39:23 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/blocks/</guid>
      <description>Blocks  Use braces with all multi-line blocks.
// bad if (test) return false; // good if (test) return false; // good if (test) { return false; } // bad function () { return false; } // good function () { return false; }  If you&amp;rsquo;re using multi-line blocks with if and else, put else on the same line as your if block&amp;rsquo;s closing brace.
// bad if (test) { thing1(); thing2(); } else { thing3(); } // good if (test) { thing1(); thing2(); } else { thing3(); }   ⬆ Back to Table of Contents</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/comments/</link>
      <pubDate>Tue, 11 Jul 2017 11:41:32 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/comments/</guid>
      <description>Comments  Use /** ... */ for multi-line comments. Include a description, specify types and values for all parameters and return values.
```javascript // bad // make() returns a new element // based on the passed in tag name // // @param {String} tag // @return {Element} element function make(tag) {
// &amp;hellip;stuff&amp;hellip;
return element; }
// good /**
 make() returns a new element based on the passed in tag name * @param {String} tag @return {Element} element */ function make(tag) {  // &amp;hellip;stuff&amp;hellip;</description>
    </item>
    
    <item>
      <title>Whitespace</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/whitespace/</link>
      <pubDate>Tue, 11 Jul 2017 11:44:04 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/whitespace/</guid>
      <description>Whitespace  Use soft tabs set to 2 spaces.
// bad function () { ∙∙∙∙var name; } // bad function () { ∙var name; } // good function () { ∙∙var name; }  Place 1 space before the leading brace.
// bad function test(){ console.log(&#39;test&#39;); } // good function test() { console.log(&#39;test&#39;); } // bad dog.set(&#39;attr&#39;,{ age: &#39;1 year&#39;, breed: &#39;Bernese Mountain Dog&#39; }); // good dog.set(&#39;attr&#39;, { age: &#39;1 year&#39;, breed: &#39;Bernese Mountain Dog&#39; });  Place 1 space before the opening parenthesis in control statements (if, while etc.</description>
    </item>
    
    <item>
      <title>Commas</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/commas/</link>
      <pubDate>Tue, 11 Jul 2017 11:46:18 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/commas/</guid>
      <description>Commas  Leading commas: Nope.
// bad var story = [ once , upon , aTime ]; // good var story = [ once, upon, aTime ]; // bad var hero = { firstName: &#39;Bob&#39; , lastName: &#39;Parr&#39; , heroName: &#39;Mr. Incredible&#39; , superPower: &#39;strength&#39; }; // good var hero = { firstName: &#39;Bob&#39;, lastName: &#39;Parr&#39;, heroName: &#39;Mr. Incredible&#39;, superPower: &#39;strength&#39; };  Additional trailing comma: Nope. This can cause problems with IE6/7 and IE9 if it&amp;rsquo;s in quirksmode.</description>
    </item>
    
    <item>
      <title>Semicolons</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/semicolons/</link>
      <pubDate>Tue, 11 Jul 2017 11:48:05 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/semicolons/</guid>
      <description>Semicolons  Yup.
// bad (function () { var name = &#39;Skywalker&#39; return name })() // good (function () { var name = &#39;Skywalker&#39;; return name; })(); // good (guards against the function becoming an argument when two files with IIFEs are concatenated) ;(function () { var name = &#39;Skywalker&#39;; return name; })();  Read more.
  ⬆ Back to Table of Contents</description>
    </item>
    
    <item>
      <title>Type Casting &amp; Coercion</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/type-casting--coercion/</link>
      <pubDate>Tue, 11 Jul 2017 11:50:17 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/type-casting--coercion/</guid>
      <description>Type Casting &amp;amp; Coercion  Perform type coercion at the beginning of the statement. Strings:
// =&amp;gt; this.reviewScore = 9; // bad var totalScore = this.reviewScore + &#39;&#39;; // good var totalScore = &#39;&#39; + this.reviewScore; // bad var totalScore = &#39;&#39; + this.reviewScore + &#39; total score&#39;; // good var totalScore = this.reviewScore + &#39; total score&#39;;  Use parseInt for Numbers and always with a radix for type casting.</description>
    </item>
    
    <item>
      <title>Naming Conventions</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/naming-conventions/</link>
      <pubDate>Tue, 11 Jul 2017 11:52:43 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/naming-conventions/</guid>
      <description>Naming Conventions  Avoid single letter names. Be descriptive with your naming.
// bad function q() { // ...stuff... } // good function query() { // ..stuff.. }  Use camelCase when naming objects, functions, and instances.
// bad var OBJEcttsssss = {}; var this_is_my_object = {}; var o = {}; function c() {} // good var thisIsMyObject = {}; function thisIsMyFunction() {}  Use PascalCase when naming constructors or classes.</description>
    </item>
    
    <item>
      <title>Accessors</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/accessors/</link>
      <pubDate>Tue, 11 Jul 2017 13:29:09 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/accessors/</guid>
      <description>Accessors  Accessor functions for properties are not required. If you do make accessor functions use getVal() and setVal(&amp;lsquo;hello&amp;rsquo;).
// bad dragon.age(); // good dragon.getAge(); // bad dragon.age(25); // good dragon.setAge(25);  If the property is a boolean, use isVal() or hasVal().
// bad if (!dragon.age()) { return false; } // good if (!dragon.hasAge()) { return false; }  It&amp;rsquo;s okay to create get() and set() functions, but be consistent.</description>
    </item>
    
    <item>
      <title>Constructors</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/constructors/</link>
      <pubDate>Tue, 11 Jul 2017 13:41:07 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/constructors/</guid>
      <description>Constructors  Assign methods to the prototype object, instead of overwriting the prototype with a new object. Overwriting the prototype makes inheritance impossible: by resetting the prototype you&amp;rsquo;ll overwrite the base!
function Jedi() { console.log(&#39;new jedi&#39;); } // bad Jedi.prototype = { fight: function fight() { console.log(&#39;fighting&#39;); }, block: function block() { console.log(&#39;blocking&#39;); } }; // good Jedi.prototype.fight = function fight() { console.log(&#39;fighting&#39;); }; Jedi.prototype.block = function block() { console.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/events/</link>
      <pubDate>Tue, 11 Jul 2017 13:45:09 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/events/</guid>
      <description>Events  When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass a hash instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:
// bad $(this).trigger(&#39;listingUpdated&#39;, listing.id); ... $(this).on(&#39;listingUpdated&#39;, function (e, listingId) { // do something with listingId });  prefer:</description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/modules/</link>
      <pubDate>Tue, 11 Jul 2017 13:46:00 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/modules/</guid>
      <description>Modules  The module should start with a !. This ensures that if a malformed module forgets to include a final semicolon there aren&amp;rsquo;t errors in production when the scripts get concatenated. Explanation The file should be named with camelCase, live in a folder with the same name, and match the name of the single export. Add a method called noConflict() that sets the exported module to the previous version and returns this one.</description>
    </item>
    
    <item>
      <title>Jquery</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/jquery/</link>
      <pubDate>Tue, 11 Jul 2017 13:52:43 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/jquery/</guid>
      <description>jQuery  Prefix jQuery object variables with a $.
// bad var sidebar = $(&#39;.sidebar&#39;); // good var $sidebar = $(&#39;.sidebar&#39;);  Cache jQuery lookups.
// bad function setSidebar() { $(&#39;.sidebar&#39;).hide(); // ...stuff... $(&#39;.sidebar&#39;).css({ &#39;background-color&#39;: &#39;pink&#39; }); } // good function setSidebar() { var $sidebar = $(&#39;.sidebar&#39;); $sidebar.hide(); // ...stuff... $sidebar.css({ &#39;background-color&#39;: &#39;pink&#39; }); }  For DOM queries use Cascading $(&#39;.sidebar ul&#39;) or parent &amp;gt; child $(&#39;.sidebar &amp;gt; ul&#39;).</description>
    </item>
    
    <item>
      <title>Ecmascript 5 Compatibility</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es5/ecmascript-5-compatibility/</link>
      <pubDate>Tue, 11 Jul 2017 13:56:47 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es5/ecmascript-5-compatibility/</guid>
      <description> ECMAScript 5 Compatibility  Refer to Kangax&amp;rsquo;s ES5 compatibility table.  ⬆ Back to Table of Contents
}; </description>
    </item>
    
    <item>
      <title>Types</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/types/</link>
      <pubDate>Tue, 11 Jul 2017 14:03:46 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/types/</guid>
      <description>Types  1.1 Primitives: When you access a primitive type you work directly on its value.
 string number boolean null undefined  const foo = 1; let bar = foo; bar = 9; console.log(foo, bar); // =&amp;gt; 1, 9  1.2 Complex: When you access a complex type you work on a reference to its value.
 object array function  const foo = [1, 2]; const bar = foo; bar[0] = 9; console.</description>
    </item>
    
    <item>
      <title>References</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/references/</link>
      <pubDate>Tue, 11 Jul 2017 14:12:32 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/references/</guid>
      <description>References  2.1 Use const for all of your references; avoid using var. eslint: prefer-const, no-const-assign
 Why? This ensures that you can’t reassign your references, which can lead to bugs and difficult to comprehend code.
 // bad var a = 1; var b = 2; // good const a = 1; const b = 2;  2.2 If you must reassign references, use let instead of var. eslint: no-var jscs: disallowVar</description>
    </item>
    
    <item>
      <title>Objects</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/objects/</link>
      <pubDate>Tue, 11 Jul 2017 14:15:33 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/objects/</guid>
      <description>Objects  3.1 Use the literal syntax for object creation. eslint: no-new-object
// bad const item = new Object(); // good const item = {};  3.2 Use computed property names when creating objects with dynamic property names.
 Why? They allow you to define all the properties of an object in one place.
 function getKey(k) { return `a key named ${k}`; } // bad const obj = { id: 5, name: &#39;San Francisco&#39;, }; obj[getKey(&#39;enabled&#39;)] = true; // good const obj = { id: 5, name: &#39;San Francisco&#39;, [getKey(&#39;enabled&#39;)]: true, };  3.</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/arrays/</link>
      <pubDate>Tue, 11 Jul 2017 15:13:24 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/arrays/</guid>
      <description>Arrays  4.1 Use the literal syntax for array creation. eslint: no-array-constructor
// bad const items = new Array(); // good const items = [];  4.2 Use Array#push instead of direct assignment to add items to an array.
const someStack = []; // bad someStack[someStack.length] = &#39;abracadabra&#39;; // good someStack.push(&#39;abracadabra&#39;);  4.3 Use array spreads ... to copy arrays.
// bad const len = items.length; const itemsCopy = []; let i; for (i = 0; i &amp;lt; len; i += 1) { itemsCopy[i] = items[i]; } // good const itemsCopy = [.</description>
    </item>
    
    <item>
      <title>Destructuring</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/destructuring/</link>
      <pubDate>Tue, 11 Jul 2017 15:16:52 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/destructuring/</guid>
      <description>Destructuring  5.1 Use object destructuring when accessing and using multiple properties of an object. jscs: requireObjectDestructuring
 Why? Destructuring saves you from creating temporary references for those properties.
 // bad function getFullName(user) { const firstName = user.firstName; const lastName = user.lastName; return `${firstName} ${lastName}`; } // good function getFullName(user) { const { firstName, lastName } = user; return `${firstName} ${lastName}`; } // best function getFullName({ firstName, lastName }) { return `${firstName} ${lastName}`; }  5.</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/strings/</link>
      <pubDate>Tue, 11 Jul 2017 15:22:27 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/strings/</guid>
      <description>Strings  6.1 Use single quotes &#39;&#39; for strings. eslint: quotes jscs: validateQuoteMarks
// bad const name = &amp;quot;Capt. Janeway&amp;quot;; // bad - template literals should contain interpolation or newlines const name = `Capt. Janeway`; // good const name = &#39;Capt. Janeway&#39;;  6.2 Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation.
 Why? Broken strings are painful to work with and make code less searchable.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/functions/</link>
      <pubDate>Tue, 11 Jul 2017 15:24:42 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/functions/</guid>
      <description>Functions  7.1 Use named function expressions instead of function declarations. eslint: func-style jscs: disallowFunctionDeclarations
 Why? Function declarations are hoisted, which means that it’s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function’s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it’s time to extract it to its own module!</description>
    </item>
    
    <item>
      <title>Arrow Functions</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/arrow-functions/</link>
      <pubDate>Tue, 11 Jul 2017 15:28:30 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/arrow-functions/</guid>
      <description>Arrow Functions  8.1 When you must use function expressions (as when passing an anonymous function), use arrow function notation. eslint: prefer-arrow-callback, arrow-spacing jscs: requireArrowFunctions
 Why? It creates a version of the function that executes in the context of this, which is usually what you want, and is a more concise syntax.
Why not? If you have a fairly complicated function, you might move that logic out into its own function declaration.</description>
    </item>
    
    <item>
      <title>Classes &amp; Constructors</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/classes--constructors/</link>
      <pubDate>Tue, 11 Jul 2017 15:30:39 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/classes--constructors/</guid>
      <description>Classes &amp;amp; Constructors  9.1 Always use class. Avoid manipulating prototype directly.
 Why? class syntax is more concise and easier to reason about.
 // bad function Queue(contents = []) { this.queue = [...contents]; } Queue.prototype.pop = function () { const value = this.queue[0]; this.queue.splice(0, 1); return value; }; // good class Queue { constructor(contents = []) { this.queue = [...contents]; } pop() { const value = this.queue[0]; this.</description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/modules/</link>
      <pubDate>Tue, 11 Jul 2017 15:33:32 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/modules/</guid>
      <description>Modules  10.1 Always use modules (import/export) over a non-standard module system. You can always transpile to your preferred module system.
 Why? Modules are the future, let’s start using the future now.
 // bad const AirbnbStyleGuide = require(&#39;./AirbnbStyleGuide&#39;); module.exports = AirbnbStyleGuide.es6; // ok import AirbnbStyleGuide from &#39;./AirbnbStyleGuide&#39;; export default AirbnbStyleGuide.es6; // best import { es6 } from &#39;./AirbnbStyleGuide&#39;; export default es6;  10.2 Do not use wildcard imports.</description>
    </item>
    
    <item>
      <title>Iterators And Generators</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/iterators-and-generators/</link>
      <pubDate>Tue, 11 Jul 2017 15:35:55 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/iterators-and-generators/</guid>
      <description>Iterators and Generators  11.1 Don’t use iterators. Prefer JavaScript’s higher-order functions instead of loops like for-in or for-of. eslint: no-iterator no-restricted-syntax
 Why? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.
Use map() / every() / filter() / find() / findIndex() / reduce() / some() / &amp;hellip; to iterate over arrays, and Object.keys() / Object.values() / Object.</description>
    </item>
    
    <item>
      <title>Properties</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/properties/</link>
      <pubDate>Tue, 11 Jul 2017 15:39:54 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/properties/</guid>
      <description>Properties  12.1 Use dot notation when accessing properties. eslint: dot-notation jscs: requireDotNotation
const luke = { jedi: true, age: 28, }; // bad const isJedi = luke[&#39;jedi&#39;]; // good const isJedi = luke.jedi;  12.2 Use bracket notation [] when accessing properties with a variable.
const luke = { jedi: true, age: 28, }; function getProp(prop) { return luke[prop]; } const isJedi = getProp(&#39;jedi&#39;);   ⬆ Back to Table of Contents</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/variables/</link>
      <pubDate>Tue, 11 Jul 2017 15:42:40 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/variables/</guid>
      <description>Variables  13.1 Always use const or let to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that. eslint: no-undef prefer-const
// bad superPower = new SuperPower(); // good const superPower = new SuperPower();  13.2 Use one const or let declaration per variable. eslint: one-var jscs: disallowMultipleVarDecl
 Why? It’s easier to add new variable declarations this way, and you never have to worry about swapping out a ; for a , or introducing punctuation-only diffs.</description>
    </item>
    
    <item>
      <title>Hoisting</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/hoisting/</link>
      <pubDate>Tue, 11 Jul 2017 16:07:43 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/hoisting/</guid>
      <description>Hoisting  14.1 var declarations get hoisted to the top of their scope, their assignment does not. const and let declarations are blessed with a new concept called Temporal Dead Zones (TDZ). It’s important to know why typeof is no longer safe.
// we know this wouldn’t work (assuming there // is no notDefined global variable) function example() { console.log(notDefined); // =&amp;gt; throws a ReferenceError } // creating a variable declaration after you // reference the variable will work due to // variable hoisting.</description>
    </item>
    
    <item>
      <title>Comparison Operators &amp; Equality</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/comparison-operators--equality/</link>
      <pubDate>Tue, 11 Jul 2017 16:08:08 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/comparison-operators--equality/</guid>
      <description>Comparison Operators &amp;amp; Equality  15.1 Use === and !== over == and !=. eslint: eqeqeq
 15.2 Conditional statements such as the if statement evaluate their expression using coercion with the ToBoolean abstract method and always follow these simple rules:
 Objects evaluate to true Undefined evaluates to false Null evaluates to false Booleans evaluate to the value of the boolean Numbers evaluate to false if +0, -0, or NaN, otherwise true Strings evaluate to false if an empty string &#39;&#39;, otherwise true  if ([0] &amp;amp;&amp;amp; []) { // true // an array (even an empty one) is an object, objects will evaluate to true }  15.</description>
    </item>
    
    <item>
      <title>Blocks</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/blocks/</link>
      <pubDate>Tue, 11 Jul 2017 16:13:12 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/blocks/</guid>
      <description>Blocks  16.1 Use braces with all multi-line blocks.
// bad if (test) return false; // good if (test) return false; // good if (test) { return false; } // bad function foo() { return false; } // good function bar() { return false; }  16.2 If you&amp;rsquo;re using multi-line blocks with if and else, put else on the same line as your if block’s closing brace. eslint: brace-style jscs: disallowNewlineBeforeBlockStatements</description>
    </item>
    
    <item>
      <title>Control Statements</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/control-statements/</link>
      <pubDate>Tue, 11 Jul 2017 16:13:47 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/control-statements/</guid>
      <description>Control Statements  17.1 In case your control statement (if, while etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. It’s up to you whether the logical operator should begin or end the line.
// bad if ((foo === 123 || bar === &#39;abc&#39;) &amp;amp;&amp;amp; doesItLookGoodWhenItBecomesThatLong() &amp;amp;&amp;amp; isThisReallyHappening()) { thing1(); } // bad if (foo === 123 &amp;amp;&amp;amp; bar === &#39;abc&#39;) { thing1(); } // bad if (foo === 123 &amp;amp;&amp;amp; bar === &#39;abc&#39;) { thing1(); } // good if ( (foo === 123 || bar === &amp;quot;abc&amp;quot;) &amp;amp;&amp;amp; doesItLookGoodWhenItBecomesThatLong() &amp;amp;&amp;amp; isThisReallyHappening() ) { thing1(); } // good if (foo === 123 &amp;amp;&amp;amp; bar === &#39;abc&#39;) { thing1(); } // good if ( foo === 123 &amp;amp;&amp;amp; bar === &#39;abc&#39; ) { thing1(); } // good if ( foo === 123 &amp;amp;&amp;amp; bar === &#39;abc&#39; ) { thing1(); }   ⬆ Back to Table of Contents</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/comments/</link>
      <pubDate>Tue, 11 Jul 2017 16:17:12 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/comments/</guid>
      <description>Comments  18.1 Use /** ... */ for multi-line comments.  // bad // make() returns a new element // based on the passed in tag name // // @param {String} tag // @return {Element} element function make(tag) { // ... return element; } // good /** * make() returns a new element * based on the passed-in tag name */ function make(tag) { // ... return element; }   18.</description>
    </item>
    
    <item>
      <title>Whitespace</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/whitespace/</link>
      <pubDate>Tue, 11 Jul 2017 16:24:15 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/whitespace/</guid>
      <description>Whitespace  19.1 Use soft tabs (space character) set to 2 spaces. eslint: indent jscs: validateIndentation
// bad function foo() { ∙∙∙∙let name; } // bad function bar() { ∙let name; } // good function baz() { ∙∙let name; }  19.2 Place 1 space before the leading brace. eslint: space-before-blocks jscs: requireSpaceBeforeBlockStatements
// bad function test(){ console.log(&#39;test&#39;); } // good function test() { console.log(&#39;test&#39;); } // bad dog.set(&#39;attr&#39;,{ age: &#39;1 year&#39;, breed: &#39;Bernese Mountain Dog&#39;, }); // good dog.</description>
    </item>
    
    <item>
      <title>Commas</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/commas/</link>
      <pubDate>Tue, 11 Jul 2017 16:24:35 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/commas/</guid>
      <description>Commas  20.1 Leading commas: Nope. eslint: comma-style jscs: requireCommaBeforeLineBreak
// bad const story = [ once , upon , aTime ]; // good const story = [ once, upon, aTime, ]; // bad const hero = { firstName: &#39;Ada&#39; , lastName: &#39;Lovelace&#39; , birthYear: 1815 , superPower: &#39;computers&#39; }; // good const hero = { firstName: &#39;Ada&#39;, lastName: &#39;Lovelace&#39;, birthYear: 1815, superPower: &#39;computers&#39;, };  20.2 Additional trailing comma: Yup.</description>
    </item>
    
    <item>
      <title>Semicolons</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/semicolons/</link>
      <pubDate>Tue, 11 Jul 2017 16:33:04 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/semicolons/</guid>
      <description>Semicolons  21.1 Yup. eslint: semi jscs: requireSemicolons
// bad (function () { const name = &#39;Skywalker&#39; return name })() // good (function () { const name = &#39;Skywalker&#39;; return name; }()); // good, but legacy (guards against the function becoming an argument when two files with IIFEs are concatenated) ;((() =&amp;gt; { const name = &#39;Skywalker&#39;; return name; })());  Read more.
  ⬆ Back to Table of Contents</description>
    </item>
    
    <item>
      <title>Type Casting &amp; Coercion</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/type-casting--coercion/</link>
      <pubDate>Tue, 11 Jul 2017 16:36:30 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/type-casting--coercion/</guid>
      <description>Type Casting &amp;amp; Coercion  22.1 Perform type coercion at the beginning of the statement.
 22.2 Strings:
// =&amp;gt; this.reviewScore = 9; // bad const totalScore = this.reviewScore + &#39;&#39;; // invokes this.reviewScore.valueOf() // bad const totalScore = this.reviewScore.toString(); // isn’t guaranteed to return a string // good const totalScore = String(this.reviewScore);  22.3 Numbers: Use Number for type casting and parseInt always with a radix for parsing strings.</description>
    </item>
    
    <item>
      <title>Naming Conventions</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/naming-conventions/</link>
      <pubDate>Tue, 11 Jul 2017 16:40:32 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/naming-conventions/</guid>
      <description>Naming Conventions  23.1 Avoid single letter names. Be descriptive with your naming. eslint: id-length
// bad function q() { // ... } // good function query() { // ... }  23.2 Use camelCase when naming objects, functions, and instances. eslint: camelcase jscs: requireCamelCaseOrUpperCaseIdentifiers
// bad const OBJEcttsssss = {}; const this_is_my_object = {}; function c() {} // good const thisIsMyObject = {}; function thisIsMyFunction() {}  23.3 Use PascalCase only when naming constructors or classes.</description>
    </item>
    
    <item>
      <title>Accessors</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/accessors/</link>
      <pubDate>Tue, 11 Jul 2017 16:42:26 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/accessors/</guid>
      <description>Accessors  24.1 Accessor functions for properties are not required.
 24.2 Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use getVal() and setVal(&#39;hello&#39;).
// bad class Dragon { get age() { // ... } set age(value) { // ... } } // good class Dragon { getAge() { // .</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/events/</link>
      <pubDate>Tue, 11 Jul 2017 16:54:40 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/events/</guid>
      <description>Events  25.1 When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass a hash instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:
// bad $(this).trigger(&#39;listingUpdated&#39;, listing.id); // ... $(this).on(&#39;listingUpdated&#39;, (e, listingId) =&amp;gt; { // do something with listingId });  prefer:</description>
    </item>
    
    <item>
      <title>Jquery</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/jquery/</link>
      <pubDate>Tue, 11 Jul 2017 16:54:45 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/jquery/</guid>
      <description>jQuery  26.1 Prefix jQuery object variables with a $. jscs: requireDollarBeforejQueryAssignment
// bad const sidebar = $(&#39;.sidebar&#39;); // good const $sidebar = $(&#39;.sidebar&#39;); // good const $sidebarBtn = $(&#39;.sidebar-btn&#39;);  26.2 Cache jQuery lookups.
// bad function setSidebar() { $(&#39;.sidebar&#39;).hide(); // ... $(&#39;.sidebar&#39;).css({ &#39;background-color&#39;: &#39;pink&#39;, }); } // good function setSidebar() { const $sidebar = $(&#39;.sidebar&#39;); $sidebar.hide(); // ... $sidebar.css({ &#39;background-color&#39;: &#39;pink&#39;, }); }  26.3 For DOM queries use Cascading $(&#39;.</description>
    </item>
    
    <item>
      <title>Ecmascript 6 Es 2015 Styles</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/es6/ecmascript-6-es-2015-styles/</link>
      <pubDate>Tue, 11 Jul 2017 16:55:01 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/es6/ecmascript-6-es-2015-styles/</guid>
      <description>ECMAScript 6+ (ES 2015+) Styles  28.1 This is a collection of links to the various ES6 features.   Arrow Functions Classes Object Shorthand Object Concise Object Computed Properties Template Strings Destructuring Default Parameters Rest Array Spreads Let and Const Iterators and Generators Modules
 28.2 Do not use TC39 proposals that have not reached stage 3.   Why? They are not finalized, and they are subject to change or to be withdrawn entirely.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/testing/</link>
      <pubDate>Tue, 11 Jul 2017 17:02:10 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/testing/</guid>
      <description>Testing  29.1 Yup.
function foo() { return true; }  29.2 No, but seriously:
 Whichever testing framework you use, you should be writing tests! Strive to write many small pure functions, and minimize where mutations occur. Be cautious about stubs and mocks - they can make your tests more brittle. We primarily use mocha at Airbnb. tape is also used occasionally for small, separate modules. 100% test coverage is a good goal to strive for, even if it’s not always practical to reach it.</description>
    </item>
    
    <item>
      <title>Performance</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/performance/</link>
      <pubDate>Tue, 11 Jul 2017 17:04:08 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/performance/</guid>
      <description>Performance  On Layout &amp;amp; Web Performance String vs Array Concat Try/Catch Cost In a Loop Bang Function jQuery Find vs Context, Selector innerHTML vs textContent for script text Long String Concatenation Are Javascript functions like map(), reduce(), and filter() optimized for traversing arrays? Loading&amp;hellip;  ⬆ Back</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/resources/</link>
      <pubDate>Tue, 11 Jul 2017 17:06:16 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/resources/</guid>
      <description>Resources Learning ES6
 Draft ECMA 2015 (ES6) Spec ExploringJS ES6 Compatibility Table Comprehensive Overview of ES6 Features  Read This
 Standard ECMA-262  Tools
 Code Style Linters  ESlint - Airbnb Style .eslintrc JSHint - Airbnb Style .jshintrc JSCS - Airbnb Style Preset (Deprecated, please use ESlint)  Neutrino preset - neutrino-preset-airbnb-base  Other Style Guides
 Google JavaScript Style Guide jQuery Core Style Guidelines Principles of Writing Consistent, Idiomatic JavaScript  Other Styles</description>
    </item>
    
    <item>
      <title>In The Wild</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/in-the-wild/</link>
      <pubDate>Tue, 11 Jul 2017 17:08:17 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/in-the-wild/</guid>
      <description>In the Wild This is a list of organizations that are using this style guide. Send us a pull request and we&amp;rsquo;ll add you to the list.
 3blades: 3Blades/javascript 4Catalyzer: 4Catalyzer/javascript Aan Zee: AanZee/javascript Adult Swim: adult-swim/javascript Airbnb: airbnb/javascript AltSchool: AltSchool/javascript Apartmint: apartmint/javascript Ascribe: ascribe/javascript Avalara: avalara/javascript Avant: avantcredit/javascript Axept: axept/javascript BashPros: BashPros/javascript Billabong: billabong/javascript Bisk: bisk/javascript Bonhomme: bonhommeparis/javascript Brainshark: brainshark/javascript CaseNine: CaseNine/javascript Chartboost: ChartBoost/javascript-style-guide ComparaOnline: comparaonline/javascript Compass Learning: compasslearning/javascript-style-guide DailyMotion: dailymotion/javascript DoSomething: DoSomething/eslint-config Digitpaint digitpaint/javascript Ecosia: ecosia/javascript Evernote: evernote/javascript-style-guide Evolution Gaming: evolution-gaming/javascript EvozonJs: evozonjs/javascript ExactTarget: ExactTarget/javascript Expensify Expensify/Style-Guide Flexberry: Flexberry/javascript-style-guide Gawker Media: gawkermedia/javascript General Electric: GeneralElectric/javascript Generation Tux: GenerationTux/javascript GoodData: gooddata/gdc-js-style Grooveshark: grooveshark/javascript Honey: honeyscience/javascript How About We: howaboutwe/javascript Huballin: huballin/javascript HubSpot: HubSpot/javascript Hyper: hyperoslo/javascript-playbook InterCity Group: intercitygroup/javascript-style-guide Jam3: Jam3/Javascript-Code-Conventions JeopardyBot: kesne/jeopardy-bot JSSolutions: JSSolutions/javascript KickorStick: kickorstick/javascript Kinetica Solutions: kinetica/javascript Lonely Planet: lonelyplanet/javascript M2GEN: M2GEN/javascript Mighty Spring: mightyspring/javascript MinnPost: MinnPost/javascript MitocGroup: MitocGroup/javascript ModCloth: modcloth/javascript Money Advice Service: moneyadviceservice/javascript Muber: muber/javascript National Geographic: natgeo/javascript Nimbl3: nimbl3/javascript Nulogy: nulogy/javascript Orange Hill Development: orangehill/javascript Orion Health: orionhealth/javascript OutBoxSoft: OutBoxSoft/javascript Peerby: Peerby/javascript Razorfish: razorfish/javascript-style-guide reddit: reddit/styleguide/javascript React: facebook.</description>
    </item>
    
    <item>
      <title>The Javascript Style Guide Guide</title>
      <link>https://xcidic.github.io/coding-guidelines/javascript/the-javascript-style-guide-guide/</link>
      <pubDate>Tue, 11 Jul 2017 17:12:03 +0700</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/javascript/the-javascript-style-guide-guide/</guid>
      <description>The JavaScript Style Guide Guide  Reference  ⬆ Back</description>
    </item>
    
    <item>
      <title>header</title>
      <link>https://xcidic.github.io/coding-guidelines/_header/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://xcidic.github.io/coding-guidelines/_header/</guid>
      <description>Coding Guidelines Documentation</description>
    </item>
    
  </channel>
</rss>